// Generated by typings
// Source: dist/interfaces/IExtract.d.ts
declare module '~proc-that/dist/interfaces/IExtract' {
import { Observable } from '~proc-that~rxjs';
export interface IExtract {
    read(): Observable<any>;
}
}
declare module 'proc-that/dist/interfaces/IExtract' {
export * from '~proc-that/dist/interfaces/IExtract';
}

// Generated by typings
// Source: dist/interfaces/ITransform.d.ts
declare module '~proc-that/dist/interfaces/ITransform' {
export interface ITransform {
    process(object: any): Promise<any>;
}
}
declare module 'proc-that/dist/interfaces/ITransform' {
export * from '~proc-that/dist/interfaces/ITransform';
}

// Generated by typings
// Source: dist/interfaces/ILoad.d.ts
declare module '~proc-that/dist/interfaces/ILoad' {
export interface ILoad {
    write(object: any): Promise<void>;
}
}
declare module 'proc-that/dist/interfaces/ILoad' {
export * from '~proc-that/dist/interfaces/ILoad';
}

// Generated by typings
// Source: node_modules/rxjs/Subject.d.ts
declare module '~proc-that~rxjs/Subject' {
import { Operator } from '~proc-that~rxjs/Operator';
import { Observer } from '~proc-that~rxjs/Observer';
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription, ISubscription, TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * @class Subject<T>
 */
export class Subject<T> extends Observable<T> implements Observer<T>, ISubscription {
    protected destination: Observer<T>;
    protected source: Observable<T>;
    static create: Function;
    constructor(destination?: Observer<T>, source?: Observable<T>);
    observers: Observer<T>[];
    isUnsubscribed: boolean;
    protected isStopped: boolean;
    protected hasErrored: boolean;
    protected errorValue: any;
    protected dispatching: boolean;
    protected hasCompleted: boolean;
    lift<T, R>(operator: Operator<T, R>): Observable<T>;
    add(subscription: TeardownLogic): Subscription;
    remove(subscription: Subscription): void;
    unsubscribe(): void;
    protected _subscribe(subscriber: Subscriber<T>): TeardownLogic;
    protected _unsubscribe(): void;
    next(value: T): void;
    error(err?: any): void;
    complete(): void;
    asObservable(): Observable<T>;
    protected _next(value: T): void;
    protected _finalNext(value: T): void;
    protected _error(err: any): void;
    protected _finalError(err: any): void;
    protected _complete(): void;
    protected _finalComplete(): void;
    private throwIfUnsubscribed();
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/IfObservable.d.ts
declare module '~proc-that~rxjs/observable/IfObservable' {
import { Observable, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class IfObservable<T, R> extends Observable<T> {
    private condition;
    private thenSource;
    private elseSource;
    static create<T, R>(condition: () => boolean | void, thenSource?: SubscribableOrPromise<T> | void, elseSource?: SubscribableOrPromise<R> | void): Observable<T | R>;
    constructor(condition: () => boolean | void, thenSource?: SubscribableOrPromise<T> | void, elseSource?: SubscribableOrPromise<R> | void);
    protected _subscribe(subscriber: Subscriber<T | R>): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/ErrorObservable.d.ts
declare module '~proc-that~rxjs/observable/ErrorObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class ErrorObservable extends Observable<any> {
    error: any;
    private scheduler;
    /**
     * @param error
     * @param scheduler
     * @return {ErrorObservable}
     * @static true
     * @name throw
     * @owner Observable
     */
    static create<T>(error: any, scheduler?: Scheduler): ErrorObservable;
    static dispatch({error, subscriber}: {
        error: any;
        subscriber: any;
    }): void;
    constructor(error: any, scheduler?: Scheduler);
    protected _subscribe(subscriber: any): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/Observable.d.ts
declare module '~proc-that~rxjs/Observable' {
import { PartialObserver, Observer } from '~proc-that~rxjs/Observer';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription, AnonymousSubscription, TeardownLogic } from '~proc-that~rxjs/Subscription';
import { IfObservable } from '~proc-that~rxjs/observable/IfObservable';
import { ErrorObservable } from '~proc-that~rxjs/observable/ErrorObservable';
export interface Subscribable<T> {
    subscribe(observer: Observer<T>): AnonymousSubscription;
}
export type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;
export type ArrayOrIterator<T> = Iterator<T> | ArrayLike<T>;
export type ObservableInput<T> = SubscribableOrPromise<T> | ArrayOrIterator<T>;
/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
export class Observable<T> implements Subscribable<T> {
    _isScalar: boolean;
    protected source: Observable<any>;
    protected operator: Operator<any, T>;
    /**
     * @constructor
     * @param {Function} subscribe the function that is  called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic);
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    static create: Function;
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    lift<R>(operator: Operator<T, R>): Observable<R>;
    /**
     * Registers handlers for handling emitted values, error and completions from the observable, and
     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
     * @method subscribe
     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled
     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     */
    subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Subscription;
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void>;
    protected _subscribe(subscriber: Subscriber<any>): TeardownLogic;
    static if: typeof IfObservable.create;
    static throw: typeof ErrorObservable.create;
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/BoundCallbackObservable.d.ts
declare module '~proc-that~rxjs/observable/BoundCallbackObservable' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { AsyncSubject } from '~proc-that~rxjs/subject/AsyncSubject';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class BoundCallbackObservable<T> extends Observable<T> {
    private callbackFunc;
    private selector;
    private args;
    scheduler: Scheduler;
    subject: AsyncSubject<T>;
    static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;
    static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;
    static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;
    static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;
    static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;
    static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;
    static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;
    static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;
    static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;
    static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;
    static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;
    static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;
    static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;
    static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;
    static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;
    static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;
    constructor(callbackFunc: Function, selector: Function, args: any[], scheduler: Scheduler);
    protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/bindCallback.d.ts
declare module '~proc-that~rxjs/add/observable/bindCallback' {
import { BoundCallbackObservable } from '~proc-that~rxjs/observable/BoundCallbackObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let bindCallback: typeof BoundCallbackObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/BoundNodeCallbackObservable.d.ts
declare module '~proc-that~rxjs/observable/BoundNodeCallbackObservable' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { AsyncSubject } from '~proc-that~rxjs/subject/AsyncSubject';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class BoundNodeCallbackObservable<T> extends Observable<T> {
    private callbackFunc;
    private selector;
    private args;
    scheduler: Scheduler;
    subject: AsyncSubject<T>;
    static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;
    static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;
    static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;
    static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;
    static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;
    static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;
    static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;
    static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;
    static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;
    constructor(callbackFunc: Function, selector: Function, args: any[], scheduler: Scheduler);
    protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/bindNodeCallback.d.ts
declare module '~proc-that~rxjs/add/observable/bindNodeCallback' {
import { BoundNodeCallbackObservable } from '~proc-that~rxjs/observable/BoundNodeCallbackObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let bindNodeCallback: typeof BoundNodeCallbackObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/OuterSubscriber.d.ts
declare module '~proc-that~rxjs/OuterSubscriber' {
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { InnerSubscriber } from '~proc-that~rxjs/InnerSubscriber';
export class OuterSubscriber<T, R> extends Subscriber<T> {
    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;
    notifyError(error: any, innerSub: InnerSubscriber<T, R>): void;
    notifyComplete(innerSub: InnerSubscriber<T, R>): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/InnerSubscriber.d.ts
declare module '~proc-that~rxjs/InnerSubscriber' {
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
export class InnerSubscriber<T, R> extends Subscriber<R> {
    private parent;
    private outerValue;
    private outerIndex;
    private index;
    constructor(parent: OuterSubscriber<T, R>, outerValue: T, outerIndex: number);
    protected _next(value: R): void;
    protected _error(error: any): void;
    protected _complete(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/combineLatest.d.ts
declare module '~proc-that~rxjs/operator/combineLatest' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
import { InnerSubscriber } from '~proc-that~rxjs/InnerSubscriber';
/**
 * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing
 * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables
 * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return
 * value of that, or just emitting the array of recent values directly if there is no `project` function.
 * @param {...Observable} observables the observables to combine the source with
 * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.
 * @return {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of
 * the most recent values from each observable.
 * @method combineLatest
 * @owner Observable
 */
export function combineLatest<T, R>(...observables: Array<ObservableInput<any> | Array<ObservableInput<any>> | ((...values: Array<any>) => R)>): Observable<R>;
export interface CombineLatestSignature<T> {
    <R>(project: (v1: T) => R): Observable<R>;
    <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;
    <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;
    <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;
    <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;
    <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;
    <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;
    <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;
    <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;
    <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;
    <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;
    <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;
    <R>(array: ObservableInput<any>[]): Observable<R>;
    <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;
}
export function combineLatestStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<[T]>;
export function combineLatestStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;
export function combineLatestStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;
export function combineLatestStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;
export function combineLatestStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;
export function combineLatestStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;
export function combineLatestStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;
export function combineLatestStatic<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;
export function combineLatestStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;
export class CombineLatestOperator<T, R> implements Operator<T, R> {
    private project;
    constructor(project?: (...values: Array<any>) => R);
    call(subscriber: Subscriber<R>): Subscriber<T>;
}
export class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {
    private project;
    private active;
    private values;
    private observables;
    private toRespond;
    constructor(destination: Subscriber<R>, project?: (...values: Array<any>) => R);
    protected _next(observable: any): void;
    protected _complete(): void;
    notifyComplete(unused: Subscriber<R>): void;
    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;
    private _tryProject(values);
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/combineLatest.d.ts
declare module '~proc-that~rxjs/add/observable/combineLatest' {
import { combineLatestStatic } from '~proc-that~rxjs/operator/combineLatest';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let combineLatest: typeof combineLatestStatic;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/concat.d.ts
declare module '~proc-that~rxjs/operator/concat' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * Joins this observable with multiple other observables by subscribing to them one at a time, starting with the source,
 * and merging their results into the returned observable. Will wait for each observable to complete before moving
 * on to the next.
 * @params {...Observable} the observables to concatenate
 * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.
 * @return {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.
 * @method concat
 * @owner Observable
 */
export function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;
export interface ConcatSignature<T> {
    (scheduler?: Scheduler): Observable<T>;
    <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;
    <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;
    <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;
    <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;
    <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;
    (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;
    <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;
}
/**
 * Joins multiple observables together by subscribing to them one at a time and merging their results
 * into the returned observable. Will wait for each observable to complete before moving on to the next.
 * @params {...Observable} the observables to concatenate
 * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.
 * @return {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
export function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;
export function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;
export function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;
export function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;
export function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;
export function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;
export function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;
export function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/concat.d.ts
declare module '~proc-that~rxjs/add/observable/concat' {
import { concatStatic } from '~proc-that~rxjs/operator/concat';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let concat: typeof concatStatic;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/DeferObservable.d.ts
declare module '~proc-that~rxjs/observable/DeferObservable' {
import { Observable, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class DeferObservable<T> extends Observable<T> {
    private observableFactory;
    /**
     * @param observableFactory
     * @return {DeferObservable}
     * @static true
     * @name defer
     * @owner Observable
     */
    static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T>;
    constructor(observableFactory: () => SubscribableOrPromise<T> | void);
    protected _subscribe(subscriber: Subscriber<T>): Subscription;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/defer.d.ts
declare module '~proc-that~rxjs/add/observable/defer' {
import { DeferObservable } from '~proc-that~rxjs/observable/DeferObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let defer: typeof DeferObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/EmptyObservable.d.ts
declare module '~proc-that~rxjs/observable/EmptyObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Observable } from '~proc-that~rxjs/Observable';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class EmptyObservable<T> extends Observable<T> {
    private scheduler;
    /**
     * @param scheduler
     * @return {Observable<T>}
     * @static true
     * @name empty
     * @owner Observable
     */
    static create<T>(scheduler?: Scheduler): Observable<T>;
    static dispatch({subscriber}: {
        subscriber: any;
    }): void;
    constructor(scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<T>): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/empty.d.ts
declare module '~proc-that~rxjs/add/observable/empty' {
import { EmptyObservable } from '~proc-that~rxjs/observable/EmptyObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let empty: typeof EmptyObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/ForkJoinObservable.d.ts
declare module '~proc-that~rxjs/observable/ForkJoinObservable' {
import { Observable, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class ForkJoinObservable<T> extends Observable<T> {
    private sources;
    private resultSelector;
    constructor(sources: Array<SubscribableOrPromise<any>>, resultSelector?: (...values: Array<any>) => T);
    /**
     * @param sources
     * @return {any}
     * @static true
     * @name forkJoin
     * @owner Observable
     */
    static create<T>(...sources: Array<SubscribableOrPromise<any> | Array<SubscribableOrPromise<any>> | ((...values: Array<any>) => any)>): Observable<T>;
    protected _subscribe(subscriber: Subscriber<any>): Subscription;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/forkJoin.d.ts
declare module '~proc-that~rxjs/add/observable/forkJoin' {
import { ForkJoinObservable } from '~proc-that~rxjs/observable/ForkJoinObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let forkJoin: typeof ForkJoinObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/FromObservable.d.ts
declare module '~proc-that~rxjs/observable/FromObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class FromObservable<T> extends Observable<T> {
    private ish;
    private scheduler;
    constructor(ish: ObservableInput<T>, scheduler: Scheduler);
    /**
     * @param ish
     * @param mapFnOrScheduler
     * @param thisArg
     * @param lastScheduler
     * @return {any}
     * @static true
     * @name from
     * @owner Observable
     */
    static create<T>(ish: any, mapFnOrScheduler?: Scheduler | ((x: any, y: number) => T), thisArg?: any, lastScheduler?: Scheduler): Observable<T>;
    protected _subscribe(subscriber: Subscriber<T>): any;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/from.d.ts
declare module '~proc-that~rxjs/add/observable/from' {
import { FromObservable } from '~proc-that~rxjs/observable/FromObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let from: typeof FromObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/FromEventObservable.d.ts
declare module '~proc-that~rxjs/observable/FromEventObservable' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
export type NodeStyleEventEmmitter = {
    addListener: (eventName: string, handler: Function) => void;
    removeListener: (eventName: string, handler: Function) => void;
};
export type JQueryStyleEventEmitter = {
    on: (eventName: string, handler: Function) => void;
    off: (eventName: string, handler: Function) => void;
};
export type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class FromEventObservable<T, R> extends Observable<T> {
    private sourceObj;
    private eventName;
    private selector;
    /**
     * @param sourceObj
     * @param eventName
     * @param selector
     * @return {FromEventObservable}
     * @static true
     * @name fromEvent
     * @owner Observable
     */
    static create<T>(sourceObj: EventTargetLike, eventName: string, selector?: (...args: Array<any>) => T): Observable<T>;
    constructor(sourceObj: EventTargetLike, eventName: string, selector?: (...args: Array<any>) => T);
    private static setupSubscription<T>(sourceObj, eventName, handler, subscriber);
    protected _subscribe(subscriber: Subscriber<T>): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/fromEvent.d.ts
declare module '~proc-that~rxjs/add/observable/fromEvent' {
import { FromEventObservable } from '~proc-that~rxjs/observable/FromEventObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let fromEvent: typeof FromEventObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/FromEventPatternObservable.d.ts
declare module '~proc-that~rxjs/observable/FromEventPatternObservable' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class FromEventPatternObservable<T, R> extends Observable<T> {
    private addHandler;
    private removeHandler;
    private selector;
    /**
     * @param addHandler
     * @param removeHandler
     * @param selector
     * @return {FromEventPatternObservable}
     * @static true
     * @name fromEventPattern
     * @owner Observable
     */
    static create<T>(addHandler: (handler: Function) => any, removeHandler: (handler: Function) => void, selector?: (...args: Array<any>) => T): FromEventPatternObservable<T, {}>;
    constructor(addHandler: (handler: Function) => any, removeHandler: (handler: Function) => void, selector?: (...args: Array<any>) => T);
    protected _subscribe(subscriber: Subscriber<T>): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/fromEventPattern.d.ts
declare module '~proc-that~rxjs/add/observable/fromEventPattern' {
import { FromEventPatternObservable } from '~proc-that~rxjs/observable/FromEventPatternObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let fromEventPattern: typeof FromEventPatternObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/PromiseObservable.d.ts
declare module '~proc-that~rxjs/observable/PromiseObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class PromiseObservable<T> extends Observable<T> {
    private promise;
    scheduler: Scheduler;
    value: T;
    /**
     * @param promise
     * @param scheduler
     * @return {PromiseObservable}
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T>;
    constructor(promise: Promise<T>, scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<T>): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/fromPromise.d.ts
declare module '~proc-that~rxjs/add/observable/fromPromise' {
import { PromiseObservable } from '~proc-that~rxjs/observable/PromiseObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let fromPromise: typeof PromiseObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/IntervalObservable.d.ts
declare module '~proc-that~rxjs/observable/IntervalObservable' {
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class IntervalObservable extends Observable<number> {
    private period;
    private scheduler;
    /**
     * @param period
     * @param scheduler
     * @return {IntervalObservable}
     * @static true
     * @name interval
     * @owner Observable
     */
    static create(period?: number, scheduler?: Scheduler): Observable<number>;
    static dispatch(state: any): void;
    constructor(period?: number, scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<number>): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/interval.d.ts
declare module '~proc-that~rxjs/add/observable/interval' {
import { IntervalObservable } from '~proc-that~rxjs/observable/IntervalObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let interval: typeof IntervalObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/merge.d.ts
declare module '~proc-that~rxjs/operator/merge' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * Creates a result Observable which emits values from every given input Observable.
 *
 * <img src="./img/merge.png" width="100%">
 *
 * @param {Observable} input Observables
 * @return {Observable} an Observable that emits items that are the result of every input Observable.
 * @method merge
 * @owner Observable
 */
export function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;
export interface MergeSignature<T> {
    (scheduler?: Scheduler): Observable<T>;
    (concurrent?: number, scheduler?: Scheduler): Observable<T>;
    <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;
    <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;
    <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;
    <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;
    <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;
    <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;
    <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;
    <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;
    <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;
    <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;
    (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;
    <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;
}
export function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;
export function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;
export function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;
export function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;
export function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;
export function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;
export function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;
export function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;
export function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;
export function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;
export function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;
export function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;
export function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;
export function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/merge.d.ts
declare module '~proc-that~rxjs/add/observable/merge' {
import { mergeStatic } from '~proc-that~rxjs/operator/merge';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let merge: typeof mergeStatic;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/race.d.ts
declare module '~proc-that~rxjs/operator/race' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
import { InnerSubscriber } from '~proc-that~rxjs/InnerSubscriber';
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables
 * @param {...Observables} ...observables sources used to race for which Observable emits first.
 * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 */
export function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;
export interface RaceSignature<T> {
    (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;
    <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;
}
/**
 * Returns an Observable that mirrors the first source Observable to emit an item.
 * @param {...Observables} ...observables sources used to race for which Observable emits first.
 * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.
 * @static true
 * @name race
 * @owner Observable
 */
export function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;
export class RaceOperator<T> implements Operator<T, T> {
    call(subscriber: Subscriber<T>): Subscriber<T>;
}
export class RaceSubscriber<T> extends OuterSubscriber<T, T> {
    private hasFirst;
    private observables;
    private subscriptions;
    constructor(destination: Subscriber<T>);
    protected _next(observable: any): void;
    protected _complete(): void;
    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/race.d.ts
declare module '~proc-that~rxjs/add/observable/race' {
import { raceStatic } from '~proc-that~rxjs/operator/race';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let race: typeof raceStatic;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/NeverObservable.d.ts
declare module '~proc-that~rxjs/observable/NeverObservable' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class NeverObservable<T> extends Observable<T> {
    /**
     * @return {NeverObservable<T>}
     * @static true
     * @name never
     * @owner Observable
     */
    static create<T>(): NeverObservable<T>;
    constructor();
    protected _subscribe(subscriber: Subscriber<T>): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/never.d.ts
declare module '~proc-that~rxjs/add/observable/never' {
import { NeverObservable } from '~proc-that~rxjs/observable/NeverObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let never: typeof NeverObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/ArrayObservable.d.ts
declare module '~proc-that~rxjs/observable/ArrayObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class ArrayObservable<T> extends Observable<T> {
    array: T[];
    scheduler: Scheduler;
    static create<T>(array: T[], scheduler?: Scheduler): Observable<T>;
    /**
     * @param array
     * @return {any}
     * @static true
     * @name of
     * @owner Observable
     */
    static of<T>(...array: Array<T | Scheduler>): Observable<T>;
    static dispatch(state: any): void;
    value: any;
    constructor(array: T[], scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<T>): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/of.d.ts
declare module '~proc-that~rxjs/add/observable/of' {
import { ArrayObservable } from '~proc-that~rxjs/observable/ArrayObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let of: typeof ArrayObservable.of;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/RangeObservable.d.ts
declare module '~proc-that~rxjs/observable/RangeObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class RangeObservable extends Observable<number> {
    /**
     * @param start
     * @param end
     * @param scheduler
     * @return {RangeObservable}
     * @static true
     * @name range
     * @owner Observable
     */
    static create(start?: number, end?: number, scheduler?: Scheduler): Observable<number>;
    static dispatch(state: any): void;
    private start;
    private end;
    private scheduler;
    constructor(start: number, end: number, scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<number>): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/range.d.ts
declare module '~proc-that~rxjs/add/observable/range' {
import { RangeObservable } from '~proc-that~rxjs/observable/RangeObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let range: typeof RangeObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/throw.d.ts
declare module '~proc-that~rxjs/add/observable/throw' {}

// Generated by typings
// Source: node_modules/rxjs/observable/TimerObservable.d.ts
declare module '~proc-that~rxjs/observable/TimerObservable' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export class TimerObservable extends Observable<number> {
    /**
     * @param dueTime
     * @param period
     * @param scheduler
     * @return {TimerObservable}
     * @static true
     * @name timer
     * @owner Observable
     */
    static create(dueTime?: number | Date, period?: number | Scheduler, scheduler?: Scheduler): Observable<number>;
    static dispatch(state: any): any;
    private period;
    private dueTime;
    private scheduler;
    constructor(dueTime?: number | Date, period?: number | Scheduler, scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<number>): TeardownLogic;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/timer.d.ts
declare module '~proc-that~rxjs/add/observable/timer' {
import { TimerObservable } from '~proc-that~rxjs/observable/TimerObservable';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let timer: typeof TimerObservable.create;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/zip.d.ts
declare module '~proc-that~rxjs/operator/zip' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * @param observables
 * @return {Observable<R>}
 * @method zip
 * @owner Observable
 */
export function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;
export interface ZipSignature<T> {
    <R>(project: (v1: T) => R): Observable<R>;
    <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;
    <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;
    <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;
    <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;
    <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;
    <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;
    <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;
    <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;
    <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;
    <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;
    <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;
    <R>(array: ObservableInput<any>[]): Observable<R>;
    <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;
}
export function zipStatic<T>(v1: ObservableInput<T>): Observable<[T]>;
export function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;
export function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;
export function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;
export function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;
export function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;
export function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;
export function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;
export function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;
export function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;
export function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;
export function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;
export function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;
export function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;
export function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;
export class ZipOperator<T, R> implements Operator<T, R> {
    project: (...values: Array<any>) => R;
    constructor(project?: (...values: Array<any>) => R);
    call(subscriber: Subscriber<R>): Subscriber<T>;
}
export class ZipSubscriber<T, R> extends Subscriber<T> {
    private index;
    private values;
    private project;
    private iterators;
    private active;
    constructor(destination: Subscriber<R>, project?: (...values: Array<any>) => R, values?: any);
    protected _next(value: any): void;
    protected _complete(): void;
    notifyInactive(): void;
    checkIterators(): void;
    protected _tryProject(args: any[]): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/observable/zip.d.ts
declare module '~proc-that~rxjs/add/observable/zip' {
import { zipStatic } from '~proc-that~rxjs/operator/zip';
module '~proc-that~rxjs/Observable' {
    namespace Observable {
        let zip: typeof zipStatic;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/buffer.d.ts
declare module '~proc-that~rxjs/operator/buffer' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
export function buffer<T>(closingNotifier: Observable<any>): Observable<T[]>;
export interface BufferSignature<T> {
    (closingNotifier: Observable<any>): Observable<T[]>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/buffer.d.ts
declare module '~proc-that~rxjs/add/operator/buffer' {
import { BufferSignature } from '~proc-that~rxjs/operator/buffer';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        buffer: BufferSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/bufferCount.d.ts
declare module '~proc-that~rxjs/operator/bufferCount' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
export function bufferCount<T>(bufferSize: number, startBufferEvery?: number): Observable<T[]>;
export interface BufferCountSignature<T> {
    (bufferSize: number, startBufferEvery?: number): Observable<T[]>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/bufferCount.d.ts
declare module '~proc-that~rxjs/add/operator/bufferCount' {
import { BufferCountSignature } from '~proc-that~rxjs/operator/bufferCount';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        bufferCount: BufferCountSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/bufferTime.d.ts
declare module '~proc-that~rxjs/operator/bufferTime' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
export function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval?: number, scheduler?: Scheduler): Observable<T[]>;
export interface BufferTimeSignature<T> {
    (bufferTimeSpan: number, bufferCreationInterval?: number, scheduler?: Scheduler): Observable<T[]>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/bufferTime.d.ts
declare module '~proc-that~rxjs/add/operator/bufferTime' {
import { BufferTimeSignature } from '~proc-that~rxjs/operator/bufferTime';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        bufferTime: BufferTimeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/bufferToggle.d.ts
declare module '~proc-that~rxjs/operator/bufferToggle' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * an Observable returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * buffers.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
export function bufferToggle<T, O>(openings: Observable<O>, closingSelector: (value: O) => Observable<any>): Observable<T[]>;
export interface BufferToggleSignature<T> {
    <O>(openings: Observable<O>, closingSelector: (value: O) => Observable<any>): Observable<T[]>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/bufferToggle.d.ts
declare module '~proc-that~rxjs/add/operator/bufferToggle' {
import { BufferToggleSignature } from '~proc-that~rxjs/operator/bufferToggle';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        bufferToggle: BufferToggleSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/bufferWhen.d.ts
declare module '~proc-that~rxjs/operator/bufferWhen' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
export function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]>;
export interface BufferWhenSignature<T> {
    (closingSelector: () => Observable<any>): Observable<T[]>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/bufferWhen.d.ts
declare module '~proc-that~rxjs/add/operator/bufferWhen' {
import { BufferWhenSignature } from '~proc-that~rxjs/operator/bufferWhen';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        bufferWhen: BufferWhenSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/cache.d.ts
declare module '~proc-that~rxjs/operator/cache' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * @param bufferSize
 * @param windowTime
 * @param scheduler
 * @return {Observable<any>}
 * @method cache
 * @owner Observable
 */
export function cache<T>(bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;
export interface CacheSignature<T> {
    (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/cache.d.ts
declare module '~proc-that~rxjs/add/operator/cache' {
import { CacheSignature } from '~proc-that~rxjs/operator/cache';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        cache: CacheSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/catch.d.ts
declare module '~proc-that~rxjs/operator/catch' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} an observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @owner Observable
 */
export function _catch<T, R>(selector: (err: any, caught: Observable<T>) => Observable<R>): Observable<R>;
export interface CatchSignature<T> {
    <R>(selector: (err: any, caught: Observable<T>) => Observable<R>): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/catch.d.ts
declare module '~proc-that~rxjs/add/operator/catch' {
import { CatchSignature } from '~proc-that~rxjs/operator/catch';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        catch: CatchSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/combineAll.d.ts
declare module '~proc-that~rxjs/operator/combineAll' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Takes an Observable of Observables, and collects all observables from it. Once the outer observable
 * completes, it subscribes to all collected observables and "combines" their values, such that:
 *  - every time an observable emits, the returned observable emits
 *  - when the returned observable emits, it emits all of the most recent values by:
 *    - if a `project` function is provided, it is called with each recent value from each observable in whatever order they arrived,
 *      and the result of the `project` function is what is emitted by the returned observable
 *    - if there is no `project` function, an array of all of the most recent values is emitted by the returned observable.
 * @param {function} [project] an optional function to map the most recent values from each observable into a new result. Takes each of the
 *   most recent values from each collected observable as arguments, in order.
 * @return {Observable} an observable of projected results or arrays of recent values.
 * @method combineAll
 * @owner Observable
 */
export function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R>;
export interface CombineAllSignature<T> {
    (): Observable<T[]>;
    <R>(project?: (...values: Array<T>) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/combineAll.d.ts
declare module '~proc-that~rxjs/add/operator/combineAll' {
import { CombineAllSignature } from '~proc-that~rxjs/operator/combineAll';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        combineAll: CombineAllSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/combineLatest.d.ts
declare module '~proc-that~rxjs/add/operator/combineLatest' {
import { CombineLatestSignature } from '~proc-that~rxjs/operator/combineLatest';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        combineLatest: CombineLatestSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/concat.d.ts
declare module '~proc-that~rxjs/add/operator/concat' {
import { ConcatSignature } from '~proc-that~rxjs/operator/concat';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        concat: ConcatSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/concatAll.d.ts
declare module '~proc-that~rxjs/operator/concatAll' {
/**
 * Joins every Observable emitted by the source (an Observable of Observables), in a serial
 * fashion. Subscribing to each one only when the previous one has completed, and merging
 * all of their values into the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the
 * Observables it emits generally complete slower than the source emits, you can run into
 * memory issues as the incoming observables collect in an unbounded buffer.
 *
 * @return {Observable} an observable of values merged from the incoming observables.
 * @method concatAll
 * @owner Observable
 */
export function concatAll<T>(): T;
export interface ConcatAllSignature<T> {
    (): T;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/concatAll.d.ts
declare module '~proc-that~rxjs/add/operator/concatAll' {
import { ConcatAllSignature } from '~proc-that~rxjs/operator/concatAll';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        concatAll: ConcatAllSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/concatMap.d.ts
declare module '~proc-that~rxjs/operator/concatMap' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
/**
 * Maps values from the source observable into new Observables, then merges them in a serialized fashion,
 * waiting for each one to complete before merging the next.
 *
 * __Warning:__ if incoming values arrive endlessly and faster than the observables they're being mapped
 * to can complete, it will result in memory issues as created observables amass in an unbounded buffer
 * waiting for their turn to be subscribed to.
 *
 * @param {function} project a function to map incoming values into Observables to be concatenated. accepts
 * the `value` and the `index` as arguments.
 * @param {function} [resultSelector] an optional result selector that is applied to values before they're
 * merged into the returned observable. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} an observable of values merged from the projected Observables as they were subscribed to,
 * one at a time. Optionally, these values may have been projected from a passed `projectResult` argument.
 * @method concatMap
 * @owner Observable
 */
export function concatMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): any;
export interface ConcatMapSignature<T> {
    <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;
    <I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/concatMap.d.ts
declare module '~proc-that~rxjs/add/operator/concatMap' {
import { ConcatMapSignature } from '~proc-that~rxjs/operator/concatMap';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        concatMap: ConcatMapSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/concatMapTo.d.ts
declare module '~proc-that~rxjs/operator/concatMapTo' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
/**
 * Maps values from the source to a specific observable, and merges them together in a serialized fashion.
 *
 * @param {Observable} observable the observable to map each source value to
 * @param {function} [resultSelector] an optional result selector that is applied to values before they're
 * merged into the returned observable. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} an observable of values merged together by joining the passed observable
 * with itself, one after the other, for each value emitted from the source.
 * @method concatMapTo
 * @owner Observable
 */
export function concatMapTo<T, I, R>(observable: Observable<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
export interface ConcatMapToSignature<T> {
    <R>(observable: ObservableInput<R>): Observable<R>;
    <I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/concatMapTo.d.ts
declare module '~proc-that~rxjs/add/operator/concatMapTo' {
import { ConcatMapToSignature } from '~proc-that~rxjs/operator/concatMapTo';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        concatMapTo: ConcatMapToSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/count.d.ts
declare module '~proc-that~rxjs/operator/count' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an observable of a single number that represents the number of items that either:
 * Match a provided predicate function, _or_ if a predicate is not provided, the number
 * represents the total count of all items in the source observable. The count is emitted
 * by the returned observable when the source observable completes.
 * @param {function} [predicate] a boolean function to select what values are to be counted.
 * it is provided with arguments of:
 *   - `value`: the value from the source observable
 *   - `index`: the "index" of the value from the source observable
 *   - `source`: the source observable instance itself.
 * @return {Observable} an observable of one number that represents the count as described
 * above
 * @method count
 * @owner Observable
 */
export function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;
export interface CountSignature<T> {
    (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/count.d.ts
declare module '~proc-that~rxjs/add/operator/count' {
import { CountSignature } from '~proc-that~rxjs/operator/count';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        count: CountSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/dematerialize.d.ts
declare module '~proc-that~rxjs/operator/dematerialize' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that transforms Notification objects into the items or notifications they represent.
 * @return {Observable} an Observable that emits items and notifications embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
export function dematerialize<T>(): Observable<any>;
export interface DematerializeSignature<T> {
    <R>(): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/dematerialize.d.ts
declare module '~proc-that~rxjs/add/operator/dematerialize' {
import { DematerializeSignature } from '~proc-that~rxjs/operator/dematerialize';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        dematerialize: DematerializeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/debounce.d.ts
declare module '~proc-that~rxjs/operator/debounce' {
import { Observable, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
/**
 * Returns the source Observable delayed by the computed debounce duration,
 * with the duration lengthened if a new source item arrives before the delay
 * duration ends.
 * In practice, for each item emitted on the source, this operator holds the
 * latest item, waits for a silence as long as the `durationSelector` specifies,
 * and only then emits the latest source item on the result Observable.
 * @param {function} durationSelector function for computing the timeout duration for each item.
 * @return {Observable} an Observable the same as source Observable, but drops items.
 * @method debounce
 * @owner Observable
 */
export function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;
export interface DebounceSignature<T> {
    (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/debounce.d.ts
declare module '~proc-that~rxjs/add/operator/debounce' {
import { DebounceSignature } from '~proc-that~rxjs/operator/debounce';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        debounce: DebounceSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/debounceTime.d.ts
declare module '~proc-that~rxjs/operator/debounceTime' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * Returns the source Observable delayed by the computed debounce duration,
 * with the duration lengthened if a new source item arrives before the delay
 * duration ends.
 * In practice, for each item emitted on the source, this operator holds the
 * latest item, waits for a silence for the `dueTime` length, and only then
 * emits the latest source item on the result Observable.
 * Optionally takes a scheduler for manging timers.
 * @param {number} dueTime the timeout value for the window of time required to not drop the item.
 * @param {Scheduler} [scheduler] the Scheduler to use for managing the timers that handle the timeout for each item.
 * @return {Observable} an Observable the same as source Observable, but drops items.
 * @method debounceTime
 * @owner Observable
 */
export function debounceTime<T>(dueTime: number, scheduler?: Scheduler): Observable<T>;
export interface DebounceTimeSignature<T> {
    (dueTime: number, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/debounceTime.d.ts
declare module '~proc-that~rxjs/add/operator/debounceTime' {
import { DebounceTimeSignature } from '~proc-that~rxjs/operator/debounceTime';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        debounceTime: DebounceTimeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/defaultIfEmpty.d.ts
declare module '~proc-that~rxjs/operator/defaultIfEmpty' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits the elements of the source or a specified default value if empty.
 * @param {any} defaultValue the default value used if source is empty; defaults to null.
 * @return {Observable} an Observable of the items emitted by the where empty values are replaced by the specified default value or null.
 * @method defaultIfEmpty
 * @owner Observable
 */
export function defaultIfEmpty<T, R>(defaultValue?: R): Observable<T | R>;
export interface DefaultIfEmptySignature<T> {
    (defaultValue?: T): Observable<T>;
    <R>(defaultValue?: R): Observable<T | R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/defaultIfEmpty.d.ts
declare module '~proc-that~rxjs/add/operator/defaultIfEmpty' {
import { DefaultIfEmptySignature } from '~proc-that~rxjs/operator/defaultIfEmpty';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        defaultIfEmpty: DefaultIfEmptySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/delay.d.ts
declare module '~proc-that~rxjs/operator/delay' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The Scheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
export function delay<T>(delay: number | Date, scheduler?: Scheduler): Observable<T>;
export interface DelaySignature<T> {
    (delay: number | Date, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/delay.d.ts
declare module '~proc-that~rxjs/add/operator/delay' {
import { DelaySignature } from '~proc-that~rxjs/operator/delay';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        delay: DelaySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/delayWhen.d.ts
declare module '~proc-that~rxjs/operator/delayWhen' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that delays the emission of items from the source Observable
 * by a subscription delay and a delay selector function for each element.
 * @param {Function} selector function to retrieve a sequence indicating the delay for each given element.
 * @param {Observable} sequence indicating the delay for the subscription to the source.
 * @return {Observable} an Observable that delays the emissions of the source Observable by the specified timeout or Date.
 * @method delayWhen
 * @owner Observable
 */
export function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;
export interface DelayWhenSignature<T> {
    (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/delayWhen.d.ts
declare module '~proc-that~rxjs/add/operator/delayWhen' {
import { DelayWhenSignature } from '~proc-that~rxjs/operator/delayWhen';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        delayWhen: DelayWhenSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/distinctUntilChanged.d.ts
declare module '~proc-that~rxjs/operator/distinctUntilChanged' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 * If a comparator function is not provided, an equality check is used by default.
 * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} an Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
export function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T>;
export interface DistinctUntilChangedSignature<T> {
    (compare?: (x: T, y: T) => boolean): Observable<T>;
    <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/distinctUntilChanged.d.ts
declare module '~proc-that~rxjs/add/operator/distinctUntilChanged' {
import { DistinctUntilChangedSignature } from '~proc-that~rxjs/operator/distinctUntilChanged';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        distinctUntilChanged: DistinctUntilChangedSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/do.d.ts
declare module '~proc-that~rxjs/operator/do' {
import { Observable } from '~proc-that~rxjs/Observable';
import { PartialObserver } from '~proc-that~rxjs/Observer';
/**
 * Returns a mirrored Observable of the source Observable, but modified so that the provided Observer is called
 * for every item emitted by the source.
 * This operator is useful for debugging your observables for the correct values or performing other side effects.
 * @param {Observer|function} [nextOrObserver] a normal observer callback or callback for onNext.
 * @param {function} [error] callback for errors in the source.
 * @param {function} [complete] callback for the completion of the source.
 * @reurns {Observable} a mirrored Observable with the specified Observer or callback attached for each item.
 * @method do
 * @owner Observable
 */
export function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void), error?: (e: any) => void, complete?: () => void): Observable<T>;
export interface DoSignature<T> {
    (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;
    (observer: PartialObserver<T>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/do.d.ts
declare module '~proc-that~rxjs/add/operator/do' {
import { DoSignature } from '~proc-that~rxjs/operator/do';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        do: DoSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/expand.d.ts
declare module '~proc-that~rxjs/operator/expand' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
import { InnerSubscriber } from '~proc-that~rxjs/InnerSubscriber';
/**
 * Returns an Observable where for each item in the source Observable, the supplied function is applied to each item,
 * resulting in a new value to then be applied again with the function.
 * @param {function} project the function for projecting the next emitted item of the Observable.
 * @param {number} [concurrent] the max number of observables that can be created concurrently. defaults to infinity.
 * @param {Scheduler} [scheduler] The Scheduler to use for managing the expansions.
 * @return {Observable} an Observable containing the expansions of the source Observable.
 * @method expand
 * @owner Observable
 */
export function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;
export interface ExpandSignature<T> {
    (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;
    <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;
}
export class ExpandOperator<T, R> implements Operator<T, R> {
    private project;
    private concurrent;
    private scheduler;
    constructor(project: (value: T, index: number) => Observable<R>, concurrent: number, scheduler: Scheduler);
    call(subscriber: Subscriber<R>): Subscriber<T>;
}
export class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {
    private project;
    private concurrent;
    private scheduler;
    private index;
    private active;
    private hasCompleted;
    private buffer;
    constructor(destination: Subscriber<R>, project: (value: T, index: number) => Observable<R>, concurrent: number, scheduler: Scheduler);
    private static dispatch({subscriber, result, value, index});
    protected _next(value: any): void;
    private subscribeToProjection(result, value, index);
    protected _complete(): void;
    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;
    notifyComplete(innerSub: Subscription): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/expand.d.ts
declare module '~proc-that~rxjs/add/operator/expand' {
import { ExpandSignature } from '~proc-that~rxjs/operator/expand';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        expand: ExpandSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/filter.d.ts
declare module '~proc-that~rxjs/operator/filter' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Similar to the well-known `Array.prototype.filter` method, this operator filters values down to a set
 * allowed by a `select` function
 *
 * @param {Function} select a function that is used to select the resulting values
 *  if it returns `true`, the value is emitted, if `false` the value is not passed to the resulting observable
 * @param {any} [thisArg] an optional argument to determine the value of `this` in the `select` function
 * @return {Observable} an observable of values allowed by the select function
 * @method filter
 * @owner Observable
 */
export function filter<T>(select: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;
export interface FilterSignature<T> {
    (select: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/filter.d.ts
declare module '~proc-that~rxjs/add/operator/filter' {
import { FilterSignature } from '~proc-that~rxjs/operator/filter';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        filter: FilterSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/finally.d.ts
declare module '~proc-that~rxjs/operator/finally' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} finallySelector function to be called when source terminates.
 * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
export function _finally<T>(finallySelector: () => void): Observable<T>;
export interface FinallySignature<T> {
    <T>(finallySelector: () => void): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/finally.d.ts
declare module '~proc-that~rxjs/add/operator/finally' {
import { FinallySignature } from '~proc-that~rxjs/operator/finally';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        finally: FinallySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/first.d.ts
declare module '~proc-that~rxjs/operator/first' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits the first item of the source Observable that matches the specified condition.
 * Throws an error if matching element is not found.
 * @param {function} predicate function called with each item to test for condition matching.
 * @return {Observable} an Observable of the first item that matches the condition.
 * @method first
 * @owner Observable
 */
export function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R, defaultValue?: R): Observable<T | R>;
export interface FirstSignature<T> {
    (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;
    (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;
    <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R, defaultValue?: R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/first.d.ts
declare module '~proc-that~rxjs/add/operator/first' {
import { FirstSignature } from '~proc-that~rxjs/operator/first';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        first: FirstSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/groupBy.d.ts
declare module '~proc-that~rxjs/operator/groupBy' {
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { Observable } from '~proc-that~rxjs/Observable';
import { Subject } from '~proc-that~rxjs/Subject';
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @param {function(value: T): K} keySelector a function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] a function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * a function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} an Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
export function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;
export interface GroupBySignature<T> {
    <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;
    <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;
    <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;
}
export interface RefCountSubscription {
    count: number;
    unsubscribe: () => void;
    isUnsubscribed: boolean;
    attemptedToUnsubscribe: boolean;
}
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
export class GroupedObservable<K, T> extends Observable<T> {
    key: K;
    private groupSubject;
    private refCountSubscription;
    constructor(key: K, groupSubject: Subject<T>, refCountSubscription?: RefCountSubscription);
    protected _subscribe(subscriber: Subscriber<T>): Subscription;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/groupBy.d.ts
declare module '~proc-that~rxjs/add/operator/groupBy' {
import { GroupBySignature } from '~proc-that~rxjs/operator/groupBy';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        groupBy: GroupBySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/ignoreElements.d.ts
declare module '~proc-that~rxjs/operator/ignoreElements' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} an empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
export function ignoreElements<T>(): Observable<T>;
export interface IgnoreElementsSignature<T> {
    (): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/ignoreElements.d.ts
declare module '~proc-that~rxjs/add/operator/ignoreElements' {
import { IgnoreElementsSignature } from '~proc-that~rxjs/operator/ignoreElements';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        ignoreElements: IgnoreElementsSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/audit.d.ts
declare module '~proc-that~rxjs/operator/audit' {
import { Observable, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
/**
 * @param durationSelector
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method audit
 * @owner Observable
 */
export function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;
export interface AuditSignature<T> {
    (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/audit.d.ts
declare module '~proc-that~rxjs/add/operator/audit' {
import { AuditSignature } from '~proc-that~rxjs/operator/audit';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        audit: AuditSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/auditTime.d.ts
declare module '~proc-that~rxjs/operator/auditTime' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param delay
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method auditTime
 * @owner Observable
 */
export function auditTime<T>(delay: number, scheduler?: Scheduler): Observable<T>;
export interface AuditTimeSignature<T> {
    (delay: number, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/auditTime.d.ts
declare module '~proc-that~rxjs/add/operator/auditTime' {
import { AuditTimeSignature } from '~proc-that~rxjs/operator/auditTime';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        auditTime: AuditTimeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/last.d.ts
declare module '~proc-that~rxjs/operator/last' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @param {function} predicate - the condition any source emitted item has to satisfy.
 * @return {Observable} an Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
export function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R | void, defaultValue?: R): Observable<T | R>;
export interface LastSignature<T> {
    (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;
    (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;
    <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R, defaultValue?: R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/last.d.ts
declare module '~proc-that~rxjs/add/operator/last' {
import { LastSignature } from '~proc-that~rxjs/operator/last';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        last: LastSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/let.d.ts
declare module '~proc-that~rxjs/operator/let' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param func
 * @return {Observable<R>}
 * @method let
 * @owner Observable
 */
export function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;
export interface LetSignature<T> {
    <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/let.d.ts
declare module '~proc-that~rxjs/add/operator/let' {
import { LetSignature } from '~proc-that~rxjs/operator/let';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        let: LetSignature<T>;
        letBind: LetSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/every.d.ts
declare module '~proc-that~rxjs/operator/every' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 * @param {function} predicate a function for determining if an item meets a specified condition.
 * @param {any} [thisArg] optional object to use for `this` in the callback
 * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
export function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;
export interface EverySignature<T> {
    (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/every.d.ts
declare module '~proc-that~rxjs/add/operator/every' {
import { EverySignature } from '~proc-that~rxjs/operator/every';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        every: EverySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/map.d.ts
declare module '~proc-that~rxjs/operator/map' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the returned observable
 *
 * <img src="./img/map.png" width="100%">
 *
 * @param {Function} project the function to create projection
 * @param {any} [thisArg] an optional argument to define what `this` is in the project function
 * @return {Observable} a observable of projected values
 * @method map
 * @owner Observable
 */
export function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;
export interface MapSignature<T> {
    <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/map.d.ts
declare module '~proc-that~rxjs/add/operator/map' {
import { MapSignature } from '~proc-that~rxjs/operator/map';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        map: MapSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/mapTo.d.ts
declare module '~proc-that~rxjs/operator/mapTo' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Maps every value to the same value every time.
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * @param {any} value the value to map each incoming value to
 * @return {Observable} an observable of the passed value that emits every time the source does
 * @method mapTo
 * @owner Observable
 */
export function mapTo<T, R>(value: R): Observable<R>;
export interface MapToSignature<T> {
    <R>(value: R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/mapTo.d.ts
declare module '~proc-that~rxjs/add/operator/mapTo' {
import { MapToSignature } from '~proc-that~rxjs/operator/mapTo';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        mapTo: MapToSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/materialize.d.ts
declare module '~proc-that~rxjs/operator/materialize' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Notification } from '~proc-that~rxjs/Notification';
/**
 * Returns an Observable that represents all of the emissions and notifications
 * from the source Observable into emissions marked with their original types
 * within a `Notification` objects.
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * @scheduler materialize does not operate by default on a particular Scheduler.
 * @return {Observable} an Observable that emits items that are the result of
 * materializing the items and notifications of the source Observable.
 * @method materialize
 * @owner Observable
 */
export function materialize<T>(): Observable<Notification<T>>;
export interface MaterializeSignature<T> {
    (): Observable<Notification<T>>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/materialize.d.ts
declare module '~proc-that~rxjs/add/operator/materialize' {
import { MaterializeSignature } from '~proc-that~rxjs/operator/materialize';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        materialize: MaterializeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/merge.d.ts
declare module '~proc-that~rxjs/add/operator/merge' {
import { MergeSignature } from '~proc-that~rxjs/operator/merge';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        merge: MergeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/mergeAll.d.ts
declare module '~proc-that~rxjs/operator/mergeAll' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Operator } from '~proc-that~rxjs/Operator';
import { Observer } from '~proc-that~rxjs/Observer';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
/**
 * @param concurrent
 * @return {Observable<R>|WebSocketSubject<Observable<any>>|Observable<Observable<any>>}
 * @method mergeAll
 * @owner Observable
 */
export function mergeAll<T>(concurrent?: number): T;
export interface MergeAllSignature<T> {
    (concurrent?: number): T;
}
export class MergeAllOperator<T> implements Operator<Observable<T>, T> {
    private concurrent;
    constructor(concurrent: number);
    call(observer: Observer<T>): MergeAllSubscriber<T>;
}
export class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {
    private concurrent;
    private hasCompleted;
    private buffer;
    private active;
    constructor(destination: Observer<T>, concurrent: number);
    protected _next(observable: Observable<T>): void;
    protected _complete(): void;
    notifyComplete(innerSub: Subscription): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/mergeAll.d.ts
declare module '~proc-that~rxjs/add/operator/mergeAll' {
import { MergeAllSignature } from '~proc-that~rxjs/operator/mergeAll';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        mergeAll: MergeAllSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/mergeMap.d.ts
declare module '~proc-that~rxjs/operator/mergeMap' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
import { InnerSubscriber } from '~proc-that~rxjs/InnerSubscriber';
/**
 * Returns an Observable that emits items based on applying a function that you supply to each item emitted by the
 * source Observable, where that function returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * @param {Function} a function that, when applied to an item emitted by the source Observable, returns an Observable.
 * @return {Observable} an Observable that emits the result of applying the transformation function to each item
 * emitted by the source Observable and merging the results of the Observables obtained from this transformation
 * @method mergeMap
 * @owner Observable
 */
export function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number, concurrent?: number): Observable<R>;
export interface MergeMapSignature<T> {
    <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;
    <I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;
}
export class MergeMapOperator<T, I, R> implements Operator<T, I> {
    private project;
    private resultSelector;
    private concurrent;
    constructor(project: (value: T, index: number) => ObservableInput<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number);
    call(observer: Subscriber<I>): Subscriber<T>;
}
export class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {
    private project;
    private resultSelector;
    private concurrent;
    private hasCompleted;
    private buffer;
    private active;
    protected index: number;
    constructor(destination: Subscriber<I>, project: (value: T, index: number) => ObservableInput<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number);
    protected _next(value: any): void;
    protected _tryNext(value: any): void;
    private _innerSub(ish, value, index);
    protected _complete(): void;
    notifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, I>): void;
    _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void;
    notifyComplete(innerSub: Subscription): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/mergeMap.d.ts
declare module '~proc-that~rxjs/add/operator/mergeMap' {
import { MergeMapSignature } from '~proc-that~rxjs/operator/mergeMap';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        flatMap: MergeMapSignature<T>;
        mergeMap: MergeMapSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/mergeMapTo.d.ts
declare module '~proc-that~rxjs/operator/mergeMapTo' {
import { Observable, ObservableInput, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { OuterSubscriber } from '~proc-that~rxjs/OuterSubscriber';
import { InnerSubscriber } from '~proc-that~rxjs/InnerSubscriber';
/**
 * @param observable
 * @param resultSelector
 * @param concurrent
 * @return {Observable<R>|WebSocketSubject<*>|Observable<*>}
 * @method mergeMapTo
 * @owner Observable
 */
export function mergeMapTo<T, I, R>(observable: Observable<I>, resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number, concurrent?: number): Observable<R>;
export interface MergeMapToSignature<T> {
    <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;
    <I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;
}
export class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {
    private ish;
    private resultSelector;
    private concurrent;
    constructor(ish: SubscribableOrPromise<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number);
    call(observer: Subscriber<R>): Subscriber<any>;
}
export class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {
    private ish;
    private resultSelector;
    private concurrent;
    private hasCompleted;
    private buffer;
    private active;
    protected index: number;
    constructor(destination: Subscriber<R>, ish: SubscribableOrPromise<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number);
    protected _next(value: any): void;
    private _innerSub(ish, destination, resultSelector, value, index);
    protected _complete(): void;
    notifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, I>): void;
    private trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
    notifyError(err: any): void;
    notifyComplete(innerSub: Subscription): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/mergeMapTo.d.ts
declare module '~proc-that~rxjs/add/operator/mergeMapTo' {
import { MergeMapToSignature } from '~proc-that~rxjs/operator/mergeMapTo';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        flatMapTo: MergeMapToSignature<T>;
        mergeMapTo: MergeMapToSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/multicast.d.ts
declare module '~proc-that~rxjs/operator/multicast' {
import { Subject } from '~proc-that~rxjs/Subject';
import { ConnectableObservable } from '~proc-that~rxjs/observable/ConnectableObservable';
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function} selector - a function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} an Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
export function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>)): ConnectableObservable<T>;
export type factoryOrValue<T> = T | (() => T);
export interface MulticastSignature<T> {
    (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/multicast.d.ts
declare module '~proc-that~rxjs/add/operator/multicast' {
import { MulticastSignature } from '~proc-that~rxjs/operator/multicast';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        multicast: MulticastSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/observeOn.d.ts
declare module '~proc-that~rxjs/operator/observeOn' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * @param scheduler
 * @param delay
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method observeOn
 * @owner Observable
 */
export function observeOn<T>(scheduler: Scheduler, delay?: number): Observable<T>;
export interface ObserveOnSignature<T> {
    (scheduler: Scheduler, delay?: number): Observable<T>;
}
export class ObserveOnOperator<T> implements Operator<T, T> {
    private scheduler;
    private delay;
    constructor(scheduler: Scheduler, delay?: number);
    call(subscriber: Subscriber<T>): Subscriber<T>;
}
export class ObserveOnSubscriber<T> extends Subscriber<T> {
    private scheduler;
    private delay;
    static dispatch({notification, destination}: {
        notification: any;
        destination: any;
    }): void;
    constructor(destination: Subscriber<T>, scheduler: Scheduler, delay?: number);
    private scheduleMessage(notification);
    protected _next(value: T): void;
    protected _error(err: any): void;
    protected _complete(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/observeOn.d.ts
declare module '~proc-that~rxjs/add/operator/observeOn' {
import { ObserveOnSignature } from '~proc-that~rxjs/operator/observeOn';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        observeOn: ObserveOnSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/partition.d.ts
declare module '~proc-that~rxjs/operator/partition' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param predicate
 * @param thisArg
 * @return {Observable<T>[]}
 * @method partition
 * @owner Observable
 */
export function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];
export interface PartitionSignature<T> {
    (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/partition.d.ts
declare module '~proc-that~rxjs/add/operator/partition' {
import { PartitionSignature } from '~proc-that~rxjs/operator/partition';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        partition: PartitionSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/pluck.d.ts
declare module '~proc-that~rxjs/operator/pluck' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Retrieves the value of a specified nested property from all elements in
 * the Observable sequence. If a property can't be resolved, it will return
 * `undefined` for that value.
 *
 * @param {...args} properties the nested properties to pluck
 * @return {Observable} Returns a new Observable sequence of property values
 * @method pluck
 * @owner Observable
 */
export function pluck<R>(...properties: string[]): Observable<R>;
export interface PluckSignature<T> {
    <R>(...properties: string[]): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/pluck.d.ts
declare module '~proc-that~rxjs/add/operator/pluck' {
import { PluckSignature } from '~proc-that~rxjs/operator/pluck';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        pluck: PluckSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/publish.d.ts
declare module '~proc-that~rxjs/operator/publish' {
import { ConnectableObservable } from '~proc-that~rxjs/observable/ConnectableObservable';
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
export function publish<T>(): ConnectableObservable<T>;
export interface PublishSignature<T> {
    (): ConnectableObservable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/publish.d.ts
declare module '~proc-that~rxjs/add/operator/publish' {
import { PublishSignature } from '~proc-that~rxjs/operator/publish';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        publish: PublishSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/publishBehavior.d.ts
declare module '~proc-that~rxjs/operator/publishBehavior' {
import { ConnectableObservable } from '~proc-that~rxjs/observable/ConnectableObservable';
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
export function publishBehavior<T>(value: T): ConnectableObservable<T>;
export interface PublishBehaviorSignature<T> {
    (value: T): ConnectableObservable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/publishBehavior.d.ts
declare module '~proc-that~rxjs/add/operator/publishBehavior' {
import { PublishBehaviorSignature } from '~proc-that~rxjs/operator/publishBehavior';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        publishBehavior: PublishBehaviorSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/publishReplay.d.ts
declare module '~proc-that~rxjs/operator/publishReplay' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { ConnectableObservable } from '~proc-that~rxjs/observable/ConnectableObservable';
/**
 * @param bufferSize
 * @param windowTime
 * @param scheduler
 * @return {ConnectableObservable<T>}
 * @method publishReplay
 * @owner Observable
 */
export function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;
export interface PublishReplaySignature<T> {
    (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/publishReplay.d.ts
declare module '~proc-that~rxjs/add/operator/publishReplay' {
import { PublishReplaySignature } from '~proc-that~rxjs/operator/publishReplay';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        publishReplay: PublishReplaySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/publishLast.d.ts
declare module '~proc-that~rxjs/operator/publishLast' {
import { ConnectableObservable } from '~proc-that~rxjs/observable/ConnectableObservable';
/**
 * @return {ConnectableObservable<T>}
 * @method publishLast
 * @owner Observable
 */
export function publishLast<T>(): ConnectableObservable<T>;
export interface PublishLastSignature<T> {
    (): ConnectableObservable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/publishLast.d.ts
declare module '~proc-that~rxjs/add/operator/publishLast' {
import { PublishLastSignature } from '~proc-that~rxjs/operator/publishLast';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        publishLast: PublishLastSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/race.d.ts
declare module '~proc-that~rxjs/add/operator/race' {
import { RaceSignature } from '~proc-that~rxjs/operator/race';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        race: RaceSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/reduce.d.ts
declare module '~proc-that~rxjs/operator/reduce' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Operator } from '~proc-that~rxjs/Operator';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
/**
 * Returns an Observable that applies a specified accumulator function to the first item emitted by a source Observable,
 * then feeds the result of that function along with the second item emitted by the source Observable into the same
 * function, and so on until all items have been emitted by the source Observable, and emits the final result from
 * the final call to your function as its sole item.
 * This technique, which is called "reduce" here, is sometimes called "aggregate," "fold," "accumulate," "compress," or
 * "inject" in other programming contexts.
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * @param {initialValue} the initial (seed) accumulator value
 * @param {accumulator} an accumulator function to be invoked on each item emitted by the source Observable, the
 * result of which will be used in the next accumulator call.
 * @return {Observable} an Observable that emits a single item that is the result of accumulating the output from the
 * items emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
export function reduce<T, R>(project: (acc: R, value: T) => R, seed?: R): Observable<R>;
export interface ReduceSignature<T> {
    <R>(project: (acc: R, value: T) => R, seed?: R): Observable<R>;
}
export class ReduceOperator<T, R> implements Operator<T, R> {
    private project;
    private seed;
    constructor(project: (acc: R, value: T) => R, seed?: R);
    call(subscriber: Subscriber<R>): Subscriber<T>;
}
export class ReduceSubscriber<T, R> extends Subscriber<T> {
    acc: T | R;
    hasSeed: boolean;
    hasValue: boolean;
    project: (acc: R, value: T) => R;
    constructor(destination: Subscriber<R>, project: (acc: R, value: T) => R, seed?: R);
    protected _next(value: T): void;
    private _tryReduce(value);
    protected _complete(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/reduce.d.ts
declare module '~proc-that~rxjs/add/operator/reduce' {
import { ReduceSignature } from '~proc-that~rxjs/operator/reduce';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        reduce: ReduceSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/repeat.d.ts
declare module '~proc-that~rxjs/operator/repeat' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,
 * on a particular Scheduler.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {Scheduler} [scheduler] the Scheduler to emit the items on.
 * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
export function repeat<T>(count?: number): Observable<T>;
export interface RepeatSignature<T> {
    (count?: number): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/repeat.d.ts
declare module '~proc-that~rxjs/add/operator/repeat' {
import { RepeatSignature } from '~proc-that~rxjs/operator/repeat';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        repeat: RepeatSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/retry.d.ts
declare module '~proc-that~rxjs/operator/retry' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the
 * predicate returns true for that specific exception and retry count.
 * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of
 * count resubscriptions (given as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} number of retry attempts before failing.
 * @return {Observable} the source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
export function retry<T>(count?: number): Observable<T>;
export interface RetrySignature<T> {
    (count?: number): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/retry.d.ts
declare module '~proc-that~rxjs/add/operator/retry' {
import { RetrySignature } from '~proc-that~rxjs/operator/retry';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        retry: RetrySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/retryWhen.d.ts
declare module '~proc-that~rxjs/operator/retryWhen' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits the same values as the source observable with the exception of an `error`.
 * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from
 * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`
 * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
 * Scheduler.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
 * aborting the retry.
 * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
 * @return {Observable} the source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
export function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;
export interface RetryWhenSignature<T> {
    (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/retryWhen.d.ts
declare module '~proc-that~rxjs/add/operator/retryWhen' {
import { RetryWhenSignature } from '~proc-that~rxjs/operator/retryWhen';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        retryWhen: RetryWhenSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/sample.d.ts
declare module '~proc-that~rxjs/operator/sample' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that, when the specified sampler Observable emits an item or completes, it then emits the most
 * recently emitted item (if any) emitted by the source Observable since the previous emission from the sampler
 * Observable.
 *
 * <img src="./img/sample.png" width="100%">
 *
 * @param {Observable} sampler - the Observable to use for sampling the source Observable.
 * @return {Observable<T>} an Observable that emits the results of sampling the items emitted by this Observable
 * whenever the sampler Observable emits an item or completes.
 * @method sample
 * @owner Observable
 */
export function sample<T>(notifier: Observable<any>): Observable<T>;
export interface SampleSignature<T> {
    (notifier: Observable<any>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/sample.d.ts
declare module '~proc-that~rxjs/add/operator/sample' {
import { SampleSignature } from '~proc-that~rxjs/operator/sample';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        sample: SampleSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/sampleTime.d.ts
declare module '~proc-that~rxjs/operator/sampleTime' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * @param delay
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method sampleTime
 * @owner Observable
 */
export function sampleTime<T>(delay: number, scheduler?: Scheduler): Observable<T>;
export interface SampleTimeSignature<T> {
    (delay: number, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/sampleTime.d.ts
declare module '~proc-that~rxjs/add/operator/sampleTime' {
import { SampleTimeSignature } from '~proc-that~rxjs/operator/sampleTime';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        sampleTime: SampleTimeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/scan.d.ts
declare module '~proc-that~rxjs/operator/scan' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that applies a specified accumulator function to each item emitted by the source Observable.
 * If a seed value is specified, then that value will be used as the initial value for the accumulator.
 * If no seed value is specified, the first item of the source is used as the seed.
 * @param {function} accumulator The accumulator function called on each item.
 *
 * <img src="./img/scan.png" width="100%">
 *
 * @param {any} [seed] The initial accumulator value.
 * @return {Obervable} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
export function scan<T, R>(accumulator: (acc: R, value: T) => R, seed?: T | R): Observable<R>;
export interface ScanSignature<T> {
    <R>(accumulator: (acc: R, value: T) => R, seed?: T | R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/scan.d.ts
declare module '~proc-that~rxjs/add/operator/scan' {
import { ScanSignature } from '~proc-that~rxjs/operator/scan';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        scan: ScanSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/share.d.ts
declare module '~proc-that~rxjs/operator/share' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .publish().refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
 * @method share
 * @owner Observable
 */
export function share<T>(): Observable<T>;
export interface ShareSignature<T> {
    (): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/share.d.ts
declare module '~proc-that~rxjs/add/operator/share' {
import { ShareSignature } from '~proc-that~rxjs/operator/share';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        share: ShareSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/single.d.ts
declare module '~proc-that~rxjs/operator/single' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @param {Function} a predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches
 * the predicate.
 .
 * @method single
 * @owner Observable
 */
export function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;
export interface SingleSignature<T> {
    (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/single.d.ts
declare module '~proc-that~rxjs/add/operator/single' {
import { SingleSignature } from '~proc-that~rxjs/operator/single';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        single: SingleSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/skip.d.ts
declare module '~proc-that~rxjs/operator/skip' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that skips `n` items emitted by an Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} the `n` of times, items emitted by source Observable should be skipped.
 * @return {Observable} an Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
export function skip<T>(total: number): Observable<T>;
export interface SkipSignature<T> {
    (total: number): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/skip.d.ts
declare module '~proc-that~rxjs/add/operator/skip' {
import { SkipSignature } from '~proc-that~rxjs/operator/skip';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        skip: SkipSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/skipUntil.d.ts
declare module '~proc-that~rxjs/operator/skipUntil' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
export function skipUntil<T>(notifier: Observable<any>): Observable<T>;
export interface SkipUntilSignature<T> {
    (notifier: Observable<any>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/skipUntil.d.ts
declare module '~proc-that~rxjs/add/operator/skipUntil' {
import { SkipUntilSignature } from '~proc-that~rxjs/operator/skipUntil';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        skipUntil: SkipUntilSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/skipWhile.d.ts
declare module '~proc-that~rxjs/operator/skipWhile' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - a function to test each item emitted from the source Observable.
 * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
export function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T>;
export interface SkipWhileSignature<T> {
    (predicate: (value: T, index: number) => boolean): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/skipWhile.d.ts
declare module '~proc-that~rxjs/add/operator/skipWhile' {
import { SkipWhileSignature } from '~proc-that~rxjs/operator/skipWhile';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        skipWhile: SkipWhileSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/startWith.d.ts
declare module '~proc-that~rxjs/operator/startWith' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the
 * source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.
 * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
export function startWith<T>(...array: Array<T | Scheduler>): Observable<T>;
export interface StartWithSignature<T> {
    (v1: T, scheduler?: Scheduler): Observable<T>;
    (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;
    (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;
    (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;
    (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;
    (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;
    (...array: Array<T | Scheduler>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/startWith.d.ts
declare module '~proc-that~rxjs/add/operator/startWith' {
import { StartWithSignature } from '~proc-that~rxjs/operator/startWith';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        startWith: StartWithSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/subscribeOn.d.ts
declare module '~proc-that~rxjs/operator/subscribeOn' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * Asynchronously subscribes Observers to this Observable on the specified Scheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} the Scheduler to perform subscription actions on.
 * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler
 .
 * @method subscribeOn
 * @owner Observable
 */
export function subscribeOn<T>(scheduler: Scheduler, delay?: number): Observable<T>;
export interface SubscribeOnSignature<T> {
    (scheduler: Scheduler, delay?: number): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/subscribeOn.d.ts
declare module '~proc-that~rxjs/add/operator/subscribeOn' {
import { SubscribeOnSignature } from '~proc-that~rxjs/operator/subscribeOn';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        subscribeOn: SubscribeOnSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/switch.d.ts
declare module '~proc-that~rxjs/operator/switch' {
/**
 * Converts a higher-order Observable into a first-order Observable by only the
 * most recently emitted of those nested Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * previous nested Observable once a new one appears.</span>
 *
 * <img src="./img/switch.png" width="100%">
 *
 * `switch` subscribes to an Observable that emits Observables,
 * also known as a higher-order Observable. Each time it observes one of these
 * emitted nested Observables, the output Observable begins emitting the items
 * emitted by that nested Observable. So far, it behaves like {@link mergeAll}.
 * However, when a new nested Observable is emitted, `switch` stops emitting
 * items from the earlier-emitted nested Observable and begins emitting items
 * from the new one. It continues to behave like this for subsequent nested
 * Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * // Each click event is mapped to an Observable that ticks every second
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var switched = higherOrder.switch();
 * // The outcome is that `switched` is essentially a timer that restarts
 * // on every click. The interval Observables from older clicks do not merge
 * // with the current interval Observable.
 * switched.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link zipAll}
 *
 * @return {Observable<T>} An Observable that emits the items emitted by the
 * Observable most recently emitted by the source Observable.
 * @method switch
 * @name switch
 * @owner Observable
 */
export function _switch<T>(): T;
export interface SwitchSignature<T> {
    (): T;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/switch.d.ts
declare module '~proc-that~rxjs/add/operator/switch' {
import { SwitchSignature } from '~proc-that~rxjs/operator/switch';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        switch: SwitchSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/switchMap.d.ts
declare module '~proc-that~rxjs/operator/switchMap' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
/**
 * Returns a new Observable by applying a function that you supply to each item emitted by the source Observable that
 * returns an Observable, and then emitting the items emitted by the most recently emitted of these Observables.
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * @param {Observable} a function that, when applied to an item emitted by the source Observable, returns an Observable.
 * @return {Observable} an Observable that emits the items emitted by the Observable returned from applying func to
 * the most recently emitted item emitted by the source Observable.
 * @method switchMap
 * @owner Observable
 */
export function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
export interface SwitchMapSignature<T> {
    <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;
    <I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/switchMap.d.ts
declare module '~proc-that~rxjs/add/operator/switchMap' {
import { SwitchMapSignature } from '~proc-that~rxjs/operator/switchMap';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        switchMap: SwitchMapSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/switchMapTo.d.ts
declare module '~proc-that~rxjs/operator/switchMapTo' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
/**
 * @param observable
 * @param resultSelector
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method switchMapTo
 * @owner Observable
 */
export function switchMapTo<T, I, R>(observable: Observable<I>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
export interface SwitchMapToSignature<T> {
    <R>(observable: ObservableInput<R>): Observable<R>;
    <I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/switchMapTo.d.ts
declare module '~proc-that~rxjs/add/operator/switchMapTo' {
import { SwitchMapToSignature } from '~proc-that~rxjs/operator/switchMapTo';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        switchMapTo: SwitchMapToSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/take.d.ts
declare module '~proc-that~rxjs/operator/take' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param total
 * @return {any}
 * @method take
 * @owner Observable
 */
export function take<T>(total: number): Observable<T>;
export interface TakeSignature<T> {
    (total: number): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/take.d.ts
declare module '~proc-that~rxjs/add/operator/take' {
import { TakeSignature } from '~proc-that~rxjs/operator/take';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        take: TakeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/takeLast.d.ts
declare module '~proc-that~rxjs/operator/takeLast' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param total
 * @return {any}
 * @method takeLast
 * @owner Observable
 */
export function takeLast<T>(total: number): Observable<T>;
export interface TakeLastSignature<T> {
    (total: number): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/takeLast.d.ts
declare module '~proc-that~rxjs/add/operator/takeLast' {
import { TakeLastSignature } from '~proc-that~rxjs/operator/takeLast';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        takeLast: TakeLastSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/takeUntil.d.ts
declare module '~proc-that~rxjs/operator/takeUntil' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param notifier
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method takeUntil
 * @owner Observable
 */
export function takeUntil<T>(notifier: Observable<any>): Observable<T>;
export interface TakeUntilSignature<T> {
    (notifier: Observable<any>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/takeUntil.d.ts
declare module '~proc-that~rxjs/add/operator/takeUntil' {
import { TakeUntilSignature } from '~proc-that~rxjs/operator/takeUntil';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        takeUntil: TakeUntilSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/takeWhile.d.ts
declare module '~proc-that~rxjs/operator/takeWhile' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param predicate
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method takeWhile
 * @owner Observable
 */
export function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T>;
export interface TakeWhileSignature<T> {
    (predicate: (value: T, index: number) => boolean): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/takeWhile.d.ts
declare module '~proc-that~rxjs/add/operator/takeWhile' {
import { TakeWhileSignature } from '~proc-that~rxjs/operator/takeWhile';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        takeWhile: TakeWhileSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/throttle.d.ts
declare module '~proc-that~rxjs/operator/throttle' {
import { Observable, SubscribableOrPromise } from '~proc-that~rxjs/Observable';
/**
 * @param durationSelector
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method throttle
 * @owner Observable
 */
export function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;
export interface ThrottleSignature<T> {
    (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/throttle.d.ts
declare module '~proc-that~rxjs/add/operator/throttle' {
import { ThrottleSignature } from '~proc-that~rxjs/operator/throttle';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        throttle: ThrottleSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/throttleTime.d.ts
declare module '~proc-that~rxjs/operator/throttleTime' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param delay
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method throttleTime
 * @owner Observable
 */
export function throttleTime<T>(delay: number, scheduler?: Scheduler): Observable<T>;
export interface ThrottleTimeSignature<T> {
    (dueTime: number, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/throttleTime.d.ts
declare module '~proc-that~rxjs/add/operator/throttleTime' {
import { ThrottleTimeSignature } from '~proc-that~rxjs/operator/throttleTime';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        throttleTime: ThrottleTimeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/timeout.d.ts
declare module '~proc-that~rxjs/operator/timeout' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param due
 * @param errorToSend
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method timeout
 * @owner Observable
 */
export function timeout<T>(due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;
export interface TimeoutSignature<T> {
    (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/timeout.d.ts
declare module '~proc-that~rxjs/add/operator/timeout' {
import { TimeoutSignature } from '~proc-that~rxjs/operator/timeout';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        timeout: TimeoutSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/timeoutWith.d.ts
declare module '~proc-that~rxjs/operator/timeoutWith' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param due
 * @param withObservable
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method timeoutWith
 * @owner Observable
 */
export function timeoutWith<T, R>(due: number | Date, withObservable: Observable<R>, scheduler?: Scheduler): Observable<T | R>;
export interface TimeoutWithSignature<T> {
    (due: number | Date, withObservable: Observable<T>, scheduler?: Scheduler): Observable<T>;
    <R>(due: number | Date, withObservable: Observable<R>, scheduler?: Scheduler): Observable<T | R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/timeoutWith.d.ts
declare module '~proc-that~rxjs/add/operator/timeoutWith' {
import { TimeoutWithSignature } from '~proc-that~rxjs/operator/timeoutWith';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        timeoutWith: TimeoutWithSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/toArray.d.ts
declare module '~proc-that~rxjs/operator/toArray' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}
 * @method toArray
 * @owner Observable
 */
export function toArray<T>(): Observable<T[]>;
export interface ToArraySignature<T> {
    (): Observable<T[]>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/toArray.d.ts
declare module '~proc-that~rxjs/add/operator/toArray' {
import { ToArraySignature } from '~proc-that~rxjs/operator/toArray';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        toArray: ToArraySignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/toPromise.d.ts
declare module '~proc-that~rxjs/operator/toPromise' {
/**
 * @param PromiseCtor
 * @return {Promise<T>}
 * @method toPromise
 * @owner Observable
 */
export function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T>;
export interface ToPromiseSignature<T> {
    (): Promise<T>;
    (PromiseCtor: typeof Promise): Promise<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/toPromise.d.ts
declare module '~proc-that~rxjs/add/operator/toPromise' {
import { ToPromiseSignature } from '~proc-that~rxjs/operator/toPromise';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        toPromise: ToPromiseSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/window.d.ts
declare module '~proc-that~rxjs/operator/window' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param closingNotifier
 * @return {Observable<Observable<any>>|WebSocketSubject<T>|Observable<T>}
 * @method window
 * @owner Observable
 */
export function window<T>(closingNotifier: Observable<any>): Observable<Observable<T>>;
export interface WindowSignature<T> {
    (closingNotifier: Observable<any>): Observable<Observable<T>>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/window.d.ts
declare module '~proc-that~rxjs/add/operator/window' {
import { WindowSignature } from '~proc-that~rxjs/operator/window';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        window: WindowSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/windowCount.d.ts
declare module '~proc-that~rxjs/operator/windowCount' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param windowSize
 * @param startWindowEvery
 * @return {Observable<Observable<any>>|WebSocketSubject<T>|Observable<T>}
 * @method windowCount
 * @owner Observable
 */
export function windowCount<T>(windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;
export interface WindowCountSignature<T> {
    (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/windowCount.d.ts
declare module '~proc-that~rxjs/add/operator/windowCount' {
import { WindowCountSignature } from '~proc-that~rxjs/operator/windowCount';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        windowCount: WindowCountSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/windowTime.d.ts
declare module '~proc-that~rxjs/operator/windowTime' {
import { Observable } from '~proc-that~rxjs/Observable';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
/**
 * @param windowTimeSpan
 * @param windowCreationInterval
 * @param scheduler
 * @return {Observable<Observable<any>>|WebSocketSubject<T>|Observable<T>}
 * @method windowTime
 * @owner Observable
 */
export function windowTime<T>(windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;
export interface WindowTimeSignature<T> {
    (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/windowTime.d.ts
declare module '~proc-that~rxjs/add/operator/windowTime' {
import { WindowTimeSignature } from '~proc-that~rxjs/operator/windowTime';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        windowTime: WindowTimeSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/windowToggle.d.ts
declare module '~proc-that~rxjs/operator/windowToggle' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param openings
 * @param closingSelector
 * @return {Observable<Observable<any>>|WebSocketSubject<T>|Observable<T>}
 * @method windowToggle
 * @owner Observable
 */
export function windowToggle<T, O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;
export interface WindowToggleSignature<T> {
    <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/windowToggle.d.ts
declare module '~proc-that~rxjs/add/operator/windowToggle' {
import { WindowToggleSignature } from '~proc-that~rxjs/operator/windowToggle';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        windowToggle: WindowToggleSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/windowWhen.d.ts
declare module '~proc-that~rxjs/operator/windowWhen' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param closingSelector
 * @return {Observable<Observable<any>>|WebSocketSubject<T>|Observable<T>}
 * @method windowWhen
 * @owner Observable
 */
export function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>>;
export interface WindowWhenSignature<T> {
    (closingSelector: () => Observable<any>): Observable<Observable<T>>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/windowWhen.d.ts
declare module '~proc-that~rxjs/add/operator/windowWhen' {
import { WindowWhenSignature } from '~proc-that~rxjs/operator/windowWhen';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        windowWhen: WindowWhenSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/withLatestFrom.d.ts
declare module '~proc-that~rxjs/operator/withLatestFrom' {
import { Observable, ObservableInput } from '~proc-that~rxjs/Observable';
/**
 * @param {Observable} observables the observables to get the latest values from.
 * @param {Function} [project] optional projection function for merging values together. Receives all values in order
 *  of observables passed. (e.g. `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not passed, arrays
 *  will be returned.
 * @description merges each value from an observable with the latest values from the other passed observables.
 * All observables must emit at least one value before the resulting observable will emit
 *
 * #### example
 * ```
 * A.withLatestFrom(B, C)
 *
 *  A:     ----a-----------------b---------------c-----------|
 *  B:     ---d----------------e--------------f---------|
 *  C:     --x----------------y-------------z-------------|
 * result: ---([a,d,x])---------([b,e,y])--------([c,f,z])---|
 * ```
 * @method withLatestFrom
 * @owner Observable
 */
export function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;
export interface WithLatestFromSignature<T> {
    <R>(project: (v1: T) => R): Observable<R>;
    <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;
    <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;
    <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;
    <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;
    <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;
    <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;
    <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;
    <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;
    <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;
    <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;
    <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;
    <R>(array: ObservableInput<any>[]): Observable<R>;
    <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/withLatestFrom.d.ts
declare module '~proc-that~rxjs/add/operator/withLatestFrom' {
import { WithLatestFromSignature } from '~proc-that~rxjs/operator/withLatestFrom';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        withLatestFrom: WithLatestFromSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/zip.d.ts
declare module '~proc-that~rxjs/add/operator/zip' {
import { ZipSignature } from '~proc-that~rxjs/operator/zip';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        zip: ZipSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/operator/zipAll.d.ts
declare module '~proc-that~rxjs/operator/zipAll' {
import { Observable } from '~proc-that~rxjs/Observable';
/**
 * @param project
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method zipAll
 * @owner Observable
 */
export function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R>;
export interface ZipAllSignature<T> {
    (): Observable<T[]>;
    <R>(project?: (...values: Array<T>) => R): Observable<R>;
}
}

// Generated by typings
// Source: node_modules/rxjs/add/operator/zipAll.d.ts
declare module '~proc-that~rxjs/add/operator/zipAll' {
import { ZipAllSignature } from '~proc-that~rxjs/operator/zipAll';
module '~proc-that~rxjs/Observable' {
    interface Observable<T> {
        zipAll: ZipAllSignature<T>;
    }
}
}

// Generated by typings
// Source: node_modules/rxjs/Operator.d.ts
declare module '~proc-that~rxjs/Operator' {
import { Subscriber } from '~proc-that~rxjs/Subscriber';
export class Operator<T, R> {
    call(subscriber: Subscriber<R>): Subscriber<T>;
}
}

// Generated by typings
// Source: node_modules/rxjs/Observer.d.ts
declare module '~proc-that~rxjs/Observer' {
export interface NextObserver<T> {
    isUnsubscribed?: boolean;
    next: (value: T) => void;
    error?: (err: any) => void;
    complete?: () => void;
}
export interface ErrorObserver<T> {
    isUnsubscribed?: boolean;
    next?: (value: T) => void;
    error: (err: any) => void;
    complete?: () => void;
}
export interface CompletionObserver<T> {
    isUnsubscribed?: boolean;
    next?: (value: T) => void;
    error?: (err: any) => void;
    complete: () => void;
}
export type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;
export interface Observer<T> {
    isUnsubscribed?: boolean;
    next: (value: T) => void;
    error: (err: any) => void;
    complete: () => void;
}
export const empty: Observer<any>;
}

// Generated by typings
// Source: node_modules/rxjs/Subscription.d.ts
declare module '~proc-that~rxjs/Subscription' {
export interface AnonymousSubscription {
    unsubscribe(): void;
}
export type TeardownLogic = AnonymousSubscription | Function | void;
export interface ISubscription extends AnonymousSubscription {
    unsubscribe(): void;
    isUnsubscribed: boolean;
    add(teardown: TeardownLogic): ISubscription;
    remove(sub: ISubscription): void;
}
export class Subscription implements ISubscription {
    static EMPTY: Subscription;
    isUnsubscribed: boolean;
    constructor(_unsubscribe?: () => void);
    unsubscribe(): void;
    /**
     * Adds a tear down to be called during the unsubscribe() of this subscription.
     *
     * If the tear down being added is a subscription that is already unsubscribed,
     * is the same reference `add` is being called on, or is `Subscription.EMPTY`,
     * it will not be added.
     *
     * If this subscription is already in an `isUnsubscribed` state, the passed tear down logic
     * will be executed immediately
     *
     * @param {TeardownLogic} teardown the additional logic to execute on teardown.
     * @returns {Subscription} returns the subscription used or created to be added to the inner
     *  subscriptions list. This subscription can be used with `remove()` to remove the passed teardown
     *  logic from the inner subscriptions list.
     */
    add(teardown: TeardownLogic): Subscription;
    /**
     * removes a subscription from the internal list of subscriptions that will unsubscribe
     * during unsubscribe process of this subscription.
     * @param {Subscription} subscription the subscription to remove
     */
    remove(subscription: Subscription): void;
}
export class UnsubscriptionError extends Error {
    errors: any[];
    constructor(errors: any[]);
}
}

// Generated by typings
// Source: node_modules/rxjs/Subscriber.d.ts
declare module '~proc-that~rxjs/Subscriber' {
import { Observer, PartialObserver } from '~proc-that~rxjs/Observer';
import { Subscription } from '~proc-that~rxjs/Subscription';
export class Subscriber<T> extends Subscription implements Observer<T> {
    static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T>;
    syncErrorValue: any;
    syncErrorThrown: boolean;
    syncErrorThrowable: boolean;
    protected isStopped: boolean;
    protected destination: PartialObserver<any>;
    constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void), error?: (e?: any) => void, complete?: () => void);
    next(value?: T): void;
    error(err?: any): void;
    complete(): void;
    unsubscribe(): void;
    protected _next(value: T): void;
    protected _error(err: any): void;
    protected _complete(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/subject/AsyncSubject.d.ts
declare module '~proc-that~rxjs/subject/AsyncSubject' {
import { Subject } from '~proc-that~rxjs/Subject';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * @class AsyncSubject<T>
 */
export class AsyncSubject<T> extends Subject<T> {
    value: T;
    hasNext: boolean;
    protected _subscribe(subscriber: Subscriber<any>): TeardownLogic;
    protected _next(value: T): void;
    protected _complete(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/Scheduler.d.ts
declare module '~proc-that~rxjs/Scheduler' {
import { Subscription } from '~proc-that~rxjs/Subscription';
import { Action } from '~proc-that~rxjs/scheduler/Action';
export interface Scheduler {
    now(): number;
    schedule<T>(work: (state?: T) => Subscription | void, delay?: number, state?: T): Subscription;
    flush(): void;
    active: boolean;
    actions: Action[];
    scheduledId: number;
}
}

// Generated by typings
// Source: node_modules/rxjs/subject/ReplaySubject.d.ts
declare module '~proc-that~rxjs/subject/ReplaySubject' {
import { Subject } from '~proc-that~rxjs/Subject';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * @class ReplaySubject<T>
 */
export class ReplaySubject<T> extends Subject<T> {
    private events;
    private scheduler;
    private bufferSize;
    private _windowTime;
    constructor(bufferSize?: number, windowTime?: number, scheduler?: Scheduler);
    protected _next(value: T): void;
    protected _subscribe(subscriber: Subscriber<T>): TeardownLogic;
    private _getNow();
    private _trimBufferThenGetEvents(now);
}
}

// Generated by typings
// Source: node_modules/rxjs/subject/BehaviorSubject.d.ts
declare module '~proc-that~rxjs/subject/BehaviorSubject' {
import { Subject } from '~proc-that~rxjs/Subject';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { TeardownLogic } from '~proc-that~rxjs/Subscription';
/**
 * @class BehaviorSubject<T>
 */
export class BehaviorSubject<T> extends Subject<T> {
    private _value;
    constructor(_value: T);
    getValue(): T;
    value: T;
    protected _subscribe(subscriber: Subscriber<T>): TeardownLogic;
    protected _next(value: T): void;
    protected _error(err: any): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/observable/ConnectableObservable.d.ts
declare module '~proc-that~rxjs/observable/ConnectableObservable' {
import { Subject } from '~proc-that~rxjs/Subject';
import { Observable } from '~proc-that~rxjs/Observable';
import { Subscriber } from '~proc-that~rxjs/Subscriber';
import { Subscription } from '~proc-that~rxjs/Subscription';
/**
 * @class ConnectableObservable<T>
 */
export class ConnectableObservable<T> extends Observable<T> {
    protected source: Observable<T>;
    protected subjectFactory: () => Subject<T>;
    protected subject: Subject<T>;
    protected subscription: Subscription;
    constructor(source: Observable<T>, subjectFactory: () => Subject<T>);
    protected _subscribe(subscriber: Subscriber<T>): Subscription;
    protected getSubject(): Subject<T>;
    connect(): Subscription;
    refCount(): Observable<T>;
    /**
     * This method is opened for `ConnectableSubscription`.
     * Not to call from others.
     */
    _closeSubscription(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/Notification.d.ts
declare module '~proc-that~rxjs/Notification' {
import { PartialObserver } from '~proc-that~rxjs/Observer';
import { Observable } from '~proc-that~rxjs/Observable';
export class Notification<T> {
    kind: string;
    value: T;
    exception: any;
    hasValue: boolean;
    constructor(kind: string, value?: T, exception?: any);
    observe(observer: PartialObserver<T>): any;
    do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any;
    accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void): any;
    toObservable(): Observable<T>;
    private static completeNotification;
    private static undefinedValueNotification;
    static createNext<T>(value: T): Notification<T>;
    static createError<T>(err?: any): Notification<T>;
    static createComplete(): Notification<any>;
}
}

// Generated by typings
// Source: node_modules/rxjs/util/EmptyError.d.ts
declare module '~proc-that~rxjs/util/EmptyError' {
export class EmptyError extends Error {
    constructor();
}
}

// Generated by typings
// Source: node_modules/rxjs/util/ArgumentOutOfRangeError.d.ts
declare module '~proc-that~rxjs/util/ArgumentOutOfRangeError' {
export class ArgumentOutOfRangeError extends Error {
    constructor();
}
}

// Generated by typings
// Source: node_modules/rxjs/util/ObjectUnsubscribedError.d.ts
declare module '~proc-that~rxjs/util/ObjectUnsubscribedError' {
/**
 * an error thrown when an action is invalid because the object
 * has been unsubscribed
 */
export class ObjectUnsubscribedError extends Error {
    constructor();
}
}

// Generated by typings
// Source: node_modules/rxjs/scheduler/Action.d.ts
declare module '~proc-that~rxjs/scheduler/Action' {
import { Subscription } from '~proc-that~rxjs/Subscription';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
export interface Action extends Subscription {
    work: (state?: any) => void | Subscription;
    state?: any;
    delay?: number;
    schedule(state?: any, delay?: number): void;
    execute(): void;
    scheduler: Scheduler;
    error: any;
}
}

// Generated by typings
// Source: node_modules/rxjs/scheduler/AsapScheduler.d.ts
declare module '~proc-that~rxjs/scheduler/AsapScheduler' {
import { Action } from '~proc-that~rxjs/scheduler/Action';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { QueueScheduler } from '~proc-that~rxjs/scheduler/QueueScheduler';
export class AsapScheduler extends QueueScheduler {
    scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action;
}
}

// Generated by typings
// Source: node_modules/rxjs/scheduler/AsyncScheduler.d.ts
declare module '~proc-that~rxjs/scheduler/AsyncScheduler' {
import { Action } from '~proc-that~rxjs/scheduler/Action';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { QueueScheduler } from '~proc-that~rxjs/scheduler/QueueScheduler';
export class AsyncScheduler extends QueueScheduler {
    scheduleNow<T>(work: (x?: any) => Subscription, state?: any): Action;
}
}

// Generated by typings
// Source: node_modules/rxjs/scheduler/FutureAction.d.ts
declare module '~proc-that~rxjs/scheduler/FutureAction' {
import { Action } from '~proc-that~rxjs/scheduler/Action';
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { Subscription } from '~proc-that~rxjs/Subscription';
export class FutureAction<T> extends Subscription implements Action {
    scheduler: Scheduler;
    work: (x?: T) => Subscription | void;
    id: number;
    state: T;
    delay: number;
    error: any;
    private pending;
    constructor(scheduler: Scheduler, work: (x?: T) => Subscription | void);
    execute(): void;
    schedule(state?: T, delay?: number): Action;
    protected _schedule(state?: T, delay?: number): Action;
    protected _unsubscribe(): void;
}
}

// Generated by typings
// Source: node_modules/rxjs/scheduler/QueueAction.d.ts
declare module '~proc-that~rxjs/scheduler/QueueAction' {
import { Action } from '~proc-that~rxjs/scheduler/Action';
import { FutureAction } from '~proc-that~rxjs/scheduler/FutureAction';
export class QueueAction<T> extends FutureAction<T> {
    protected _schedule(state?: T, delay?: number): Action;
}
}

// Generated by typings
// Source: node_modules/rxjs/scheduler/QueueScheduler.d.ts
declare module '~proc-that~rxjs/scheduler/QueueScheduler' {
import { Scheduler } from '~proc-that~rxjs/Scheduler';
import { QueueAction } from '~proc-that~rxjs/scheduler/QueueAction';
import { Subscription } from '~proc-that~rxjs/Subscription';
import { Action } from '~proc-that~rxjs/scheduler/Action';
export class QueueScheduler implements Scheduler {
    active: boolean;
    actions: QueueAction<any>[];
    scheduledId: number;
    now(): number;
    flush(): void;
    schedule<T>(work: (x?: T) => Subscription | void, delay?: number, state?: T): Subscription;
    scheduleNow<T>(work: (x?: T) => Subscription | void, state?: T): Action;
    scheduleLater<T>(work: (x?: T) => Subscription | void, delay: number, state?: T): Action;
}
}

// Generated by typings
// Source: node_modules/rxjs/Rx.d.ts
declare module '~proc-that~rxjs' {
export { Subject } from '~proc-that~rxjs/Subject';
export { Observable } from '~proc-that~rxjs/Observable';
import '~proc-that~rxjs/add/observable/bindCallback';
import '~proc-that~rxjs/add/observable/bindNodeCallback';
import '~proc-that~rxjs/add/observable/combineLatest';
import '~proc-that~rxjs/add/observable/concat';
import '~proc-that~rxjs/add/observable/defer';
import '~proc-that~rxjs/add/observable/empty';
import '~proc-that~rxjs/add/observable/forkJoin';
import '~proc-that~rxjs/add/observable/from';
import '~proc-that~rxjs/add/observable/fromEvent';
import '~proc-that~rxjs/add/observable/fromEventPattern';
import '~proc-that~rxjs/add/observable/fromPromise';
import '~proc-that~rxjs/add/observable/interval';
import '~proc-that~rxjs/add/observable/merge';
import '~proc-that~rxjs/add/observable/race';
import '~proc-that~rxjs/add/observable/never';
import '~proc-that~rxjs/add/observable/of';
import '~proc-that~rxjs/add/observable/range';
import '~proc-that~rxjs/add/observable/throw';
import '~proc-that~rxjs/add/observable/timer';
import '~proc-that~rxjs/add/observable/zip';
import '~proc-that~rxjs/add/operator/buffer';
import '~proc-that~rxjs/add/operator/bufferCount';
import '~proc-that~rxjs/add/operator/bufferTime';
import '~proc-that~rxjs/add/operator/bufferToggle';
import '~proc-that~rxjs/add/operator/bufferWhen';
import '~proc-that~rxjs/add/operator/cache';
import '~proc-that~rxjs/add/operator/catch';
import '~proc-that~rxjs/add/operator/combineAll';
import '~proc-that~rxjs/add/operator/combineLatest';
import '~proc-that~rxjs/add/operator/concat';
import '~proc-that~rxjs/add/operator/concatAll';
import '~proc-that~rxjs/add/operator/concatMap';
import '~proc-that~rxjs/add/operator/concatMapTo';
import '~proc-that~rxjs/add/operator/count';
import '~proc-that~rxjs/add/operator/dematerialize';
import '~proc-that~rxjs/add/operator/debounce';
import '~proc-that~rxjs/add/operator/debounceTime';
import '~proc-that~rxjs/add/operator/defaultIfEmpty';
import '~proc-that~rxjs/add/operator/delay';
import '~proc-that~rxjs/add/operator/delayWhen';
import '~proc-that~rxjs/add/operator/distinctUntilChanged';
import '~proc-that~rxjs/add/operator/do';
import '~proc-that~rxjs/add/operator/expand';
import '~proc-that~rxjs/add/operator/filter';
import '~proc-that~rxjs/add/operator/finally';
import '~proc-that~rxjs/add/operator/first';
import '~proc-that~rxjs/add/operator/groupBy';
import '~proc-that~rxjs/add/operator/ignoreElements';
import '~proc-that~rxjs/add/operator/audit';
import '~proc-that~rxjs/add/operator/auditTime';
import '~proc-that~rxjs/add/operator/last';
import '~proc-that~rxjs/add/operator/let';
import '~proc-that~rxjs/add/operator/every';
import '~proc-that~rxjs/add/operator/map';
import '~proc-that~rxjs/add/operator/mapTo';
import '~proc-that~rxjs/add/operator/materialize';
import '~proc-that~rxjs/add/operator/merge';
import '~proc-that~rxjs/add/operator/mergeAll';
import '~proc-that~rxjs/add/operator/mergeMap';
import '~proc-that~rxjs/add/operator/mergeMapTo';
import '~proc-that~rxjs/add/operator/multicast';
import '~proc-that~rxjs/add/operator/observeOn';
import '~proc-that~rxjs/add/operator/partition';
import '~proc-that~rxjs/add/operator/pluck';
import '~proc-that~rxjs/add/operator/publish';
import '~proc-that~rxjs/add/operator/publishBehavior';
import '~proc-that~rxjs/add/operator/publishReplay';
import '~proc-that~rxjs/add/operator/publishLast';
import '~proc-that~rxjs/add/operator/race';
import '~proc-that~rxjs/add/operator/reduce';
import '~proc-that~rxjs/add/operator/repeat';
import '~proc-that~rxjs/add/operator/retry';
import '~proc-that~rxjs/add/operator/retryWhen';
import '~proc-that~rxjs/add/operator/sample';
import '~proc-that~rxjs/add/operator/sampleTime';
import '~proc-that~rxjs/add/operator/scan';
import '~proc-that~rxjs/add/operator/share';
import '~proc-that~rxjs/add/operator/single';
import '~proc-that~rxjs/add/operator/skip';
import '~proc-that~rxjs/add/operator/skipUntil';
import '~proc-that~rxjs/add/operator/skipWhile';
import '~proc-that~rxjs/add/operator/startWith';
import '~proc-that~rxjs/add/operator/subscribeOn';
import '~proc-that~rxjs/add/operator/switch';
import '~proc-that~rxjs/add/operator/switchMap';
import '~proc-that~rxjs/add/operator/switchMapTo';
import '~proc-that~rxjs/add/operator/take';
import '~proc-that~rxjs/add/operator/takeLast';
import '~proc-that~rxjs/add/operator/takeUntil';
import '~proc-that~rxjs/add/operator/takeWhile';
import '~proc-that~rxjs/add/operator/throttle';
import '~proc-that~rxjs/add/operator/throttleTime';
import '~proc-that~rxjs/add/operator/timeout';
import '~proc-that~rxjs/add/operator/timeoutWith';
import '~proc-that~rxjs/add/operator/toArray';
import '~proc-that~rxjs/add/operator/toPromise';
import '~proc-that~rxjs/add/operator/window';
import '~proc-that~rxjs/add/operator/windowCount';
import '~proc-that~rxjs/add/operator/windowTime';
import '~proc-that~rxjs/add/operator/windowToggle';
import '~proc-that~rxjs/add/operator/windowWhen';
import '~proc-that~rxjs/add/operator/withLatestFrom';
import '~proc-that~rxjs/add/operator/zip';
import '~proc-that~rxjs/add/operator/zipAll';
export { Operator } from '~proc-that~rxjs/Operator';
export { Observer } from '~proc-that~rxjs/Observer';
export { Subscription, UnsubscriptionError } from '~proc-that~rxjs/Subscription';
export { Subscriber } from '~proc-that~rxjs/Subscriber';
export { AsyncSubject } from '~proc-that~rxjs/subject/AsyncSubject';
export { ReplaySubject } from '~proc-that~rxjs/subject/ReplaySubject';
export { BehaviorSubject } from '~proc-that~rxjs/subject/BehaviorSubject';
export { ConnectableObservable } from '~proc-that~rxjs/observable/ConnectableObservable';
export { Notification } from '~proc-that~rxjs/Notification';
export { EmptyError } from '~proc-that~rxjs/util/EmptyError';
export { ArgumentOutOfRangeError } from '~proc-that~rxjs/util/ArgumentOutOfRangeError';
export { ObjectUnsubscribedError } from '~proc-that~rxjs/util/ObjectUnsubscribedError';
import { AsapScheduler } from '~proc-that~rxjs/scheduler/AsapScheduler';
import { AsyncScheduler } from '~proc-that~rxjs/scheduler/AsyncScheduler';
import { QueueScheduler } from '~proc-that~rxjs/scheduler/QueueScheduler';
var Scheduler: {
    asap: AsapScheduler;
    async: AsyncScheduler;
    queue: QueueScheduler;
};
var Symbol: {
    rxSubscriber: any;
    observable: any;
    iterator: any;
};
export { Scheduler, Symbol };
}

// Generated by typings
// Source: dist/Etl.d.ts
declare module '~proc-that/dist/Etl' {
import { IExtract } from '~proc-that/dist/interfaces/IExtract';
import { ITransform } from '~proc-that/dist/interfaces/ITransform';
import { ILoad } from '~proc-that/dist/interfaces/ILoad';
import { Observable } from '~proc-that~rxjs';
export enum EtlState {
    Running = 0,
    Stopped = 1,
    Error = 2,
}
export class Etl {
    private _extractors;
    private _transformers;
    private _loaders;
    private _state;
    extractors: IExtract[];
    transformers: ITransform[];
    loaders: ILoad[];
    state: EtlState;
    addExtractor(extract: IExtract): Etl;
    addTransformer(transformer: ITransform): Etl;
    addLoader(loader: ILoad): Etl;
    start(): Observable<any>;
    reset(): void;
}
}
declare module 'proc-that/dist/Etl' {
export * from '~proc-that/dist/Etl';
}

// Generated by typings
// Source: dist/extractors/JsonExtractor.d.ts
declare module '~proc-that/dist/extractors/JsonExtractor' {
import { IExtract } from '~proc-that/dist/interfaces/IExtract';
import { Observable } from '~proc-that~rxjs';
export class JsonExtractor implements IExtract {
    private filePath;
    constructor(filePath: string);
    read(): Observable<any>;
}
}
declare module 'proc-that/dist/extractors/JsonExtractor' {
export * from '~proc-that/dist/extractors/JsonExtractor';
}

// Generated by typings
// Source: dist/loaders/ConsoleLoader.d.ts
declare module '~proc-that/dist/loaders/ConsoleLoader' {
import { ILoad } from '~proc-that/dist/interfaces/ILoad';
export class ConsoleLoader implements ILoad {
    write(object: any): Promise<void>;
}
}
declare module 'proc-that/dist/loaders/ConsoleLoader' {
export * from '~proc-that/dist/loaders/ConsoleLoader';
}

// Generated by typings
// Source: dist/index.d.ts
declare module '~proc-that/dist/index' {
export { Etl } from '~proc-that/dist/Etl';
export * from '~proc-that/dist/extractors/JsonExtractor';
export * from '~proc-that/dist/loaders/ConsoleLoader';
}
declare module 'proc-that/dist/index' {
export * from '~proc-that/dist/index';
}
declare module 'proc-that' {
export * from '~proc-that/dist/index';
}
